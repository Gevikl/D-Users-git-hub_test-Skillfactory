from random import randint
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, number)
        return self.x == number.x and self.y == number.y
    def __repr__(self):
        return f'Dot({self.x},{self.y})'
class Ship:
    def __init__(self, top_ship, lenghth_ship, side):
        self.top_ship = top_ship
        self.lenghth_ship = lenghth_ship
        self.side = side
        self.lives = lenghth_ship
    @property
    def lives_ship(self):
        ships_ = []
        for i in range(self.lenghth_ship):
            ship_x = self.top_ship.x
            ship_y = self.top_ship.y
            if self.side == 0:
                ship_x += i
            elif self.side == 1:
                ship_y += i
            ships_.append(Dot(ship_x, ship_y))
        return ships_
    def hits(self, hit):
        return hit in self.lives_ship


class Game_field:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid
        self.count = 0
        self.field = [["O"] * size for _ in range(size)]
        self.busy = []
        self.ships = []
    def __str__(self):
        board = ""
        board += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            board += f"\n{i + 1} | " + " | ".join(row) + " |"

        if self.hid:
            board = board.replace("■", "O")
        return board
    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.lives_ship:
            for dx, dy in near:
                begin_s = Dot(d.x + dx, d.y + dy)
                if not (self.out(begin_s)) and begin_s not in self.busy:
                    if verb:
                        self.field[ship.x][ship.y] = "."
                    self.busy.append(begin_s)

    def add_ship(self, ship):
        for d in ship.lives_ship:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.lives_ship:
            self.field[d.x][d.y] = "■"
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            raise BoardUsedException()

        self.busy.append(d)

        for ship in self.ships:
            if d in ship.lives_ship(d):
                ship.lives -= 1
                self.field[d.x][d.y] = "X"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb = True)
                    print("Уничтожен")
                    return False
                else:
                    print("Ранил")
                    return True

        self.field[d.x][d.y] = "."
        print("Не попал")
        return False

    def begin(self):
        self.busy = []


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class Ii(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f"Ход Ии - {d.x + 1} {d.y + 1}")
        return d


class User(Player):
    def ask(self):
        while True:
            cords = input("Ваш ход - ").split()

            if len(cords) != 2:
                print(" Введите 2 координаты")
                continue

            x, y = cords

            if not (x.isdigit()) or not (y.isdigit()):
                print(" Введите числа ")
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1)


class Game:
    def __init__(self, size = 6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True

        self.Ii = Ii(co, pl)
        self.us = User(pl, co)

    def try_board(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Game_field(size = self.size)
        attempts = 0
        for lenghth_ship in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), lenghth_ship, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board

    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    def loop(self):
        num = 0
        while True:
            print("-" * 20)
            print("Ваша доска:")
            print(self.us.board)
            print("-" * 20)
            print("Доска Ии:")
            print(self.ai.board)
            print("-" * 20)
            if num % 2 == 0:
                print("Ваш ход:")
                repeat = self.us.move()
            else:
                print("Ходит Ии")
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 7:
                print("-" * 20)
                print("Пользователь выиграл!")
                break

            if self.us.board.count == 7:
                print("-" * 20)
                print("Компьютер выиграл!")
                break
            num += 1
    def start(self):
        self.loop()
z = Game()
z.start()
